#!/usr/bin/env bash 
##################################################################
# Purpose: Run against group of dirs and do git pull or git status
# Date: 07/02/2024
# Author: Stephen Sparks
# Revisions:
#################################################################
# TODOs 
# Maybe a check to make sure that you are running it in the right dir/area
# add alittle color for the cd break it up alittle better
# for i in *; do cd $i; git status; echo ""; cd ..;done 
# Maybe add a sleep and time out the git status the same way pull does
# Proper error checking (what if there is a merge conflict on a pull)

# Proper check should be:
# gitcheck (defaults to status)
# gitcheck pull (for pull)
# gitcheck status (for status)
# git any_arg (for the elsestatement should only run if improper arg is passed)

black=$'\e[30m'
red=$'\e[31m'
green=$'\e[32m'
yellow=$'\e[33m'
blue=$'\e[34m'
magenta=$'\e[35m'
cyan=$'\e[36m'
white=$'\e[37m'
reset=$'\e[0m'

# Need a way to space out the git status messages so we can see each repo one at a time 
# goes too fast and if there are boat load of repos screen space is a issue
gitrun(){
    local input=$1
    for i in *; do # better way to for loop this for i in (ls .) maybe help check the dir before running 
        cd "$i" || { echo "cd failed"; exit 1; } # Should check and fail against a none dir
        git "$input"
        echo ""
        cd .. # do we need a pwd?
    done
}

if [[ $1 == "pull" ]]; then
    gitrun "pull"
elif [[ $1 == "status" ]] || [[ $# = 0 ]] ; then # run with status or no args passed 
    gitrun "status"
else # Else should be an error that explains how to use the gitcheck pull/status
    printf "${red}Run with wrong argument passed\nTry gitcheck status or pull (or run without arg for default status${reset}\n"
fi

